<?php
namespace app\index\controller;

use think\Controller;
use pay\AlipaySubmit;
use pay\AlipayNotify;
use think\Db;
use think\Loader;



class Pays extends Controller
{

    protected  $pay = 'pay';

    protected  $alipay_config;

    protected  $error= '支付数据为空';

    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $pay = Db::name($this->pay)->order('id desc')->find();

        if (empty($pay)) {
            $this->error;exit();
        }

       $this->alipay_config =array(
        'partner'=> $pay['pid'],
        'key'=> $pay['key'],
        'sign_type' => strtoupper('MD5'),
        'input_charset' => strtolower('utf-8'),
        'transport'=> 'http',
        'apiurl' => $pay['url'],
       );

    }

    public function index(){
        if($this->request->isPost()){

            $pay = Db::name($this->pay)->order('id desc')->find();

            $notify_url = $this->notify_url();
            //需http://格式的完整路径，不能加?id=123这类自定义参数
            //页面跳转同步通知页面路径
            $return_url = $this->return_url();
            //需http://格式的完整路径，不能加?id=123这类自定义参数，不能写成http://localhost/
            //商户订单号
            $out_trade_no = input('post.order_no','','trim');
            //商户网站订单系统中唯一订单号，必填
            //支付方式
            $type = input('post.type','','trim');
            //商品名称
            $name = input('post.goodnames','','trim');
            //付款金额
            $money = input('post.paynum');
            //站点名称
            $sitename = input('post.sitename','','trim');
            //构造要请求的参数数组，无需改动
            $parameter = array(
                "pid" =>$pay['pid'],
                "type" => $type,
                "notify_url"	=> $notify_url,
                "return_url"	=> $return_url,
                "out_trade_no"	=> $out_trade_no,
                "name"	=> $name,
                "money"	=> $money,
                "sitename"	=> $sitename,
            );

            //建立请求
            Loader::import("AlipaySubmit",EXTEND_PATH);
            $alipaySubmit = new \AlipaysSubmit($this->alipay_config);
            $html_text = $alipaySubmit->buildRequestForm($parameter);
            echo $html_text;
        }
        return false;
    }


    public function return_url(){
        Loader::import("AlipayNotify",EXTEND_PATH);
        $alipayNotify = new \AlipayNotify($this->alipay_config);
        $verify_result = $alipayNotify->verifyReturn();
        if($verify_result) {//验证成功
            //商户订单号
            $out_trade_no = $_GET['out_trade_no'];
            //支付宝交易号
            $trade_no = $_GET['trade_no'];
            //交易状态
            $trade_status = $_GET['trade_status'];
            //支付方式
            $type = $_GET['type'];

            if($_GET['trade_status'] == 'TRADE_SUCCESS') {
                //判断该笔订单是否在商户网站中已经做过处理
                //如果没有做过处理，根据订单号（out_trade_no）在商户网站的订单系统中查到该笔订单的详细，并执行商户的业务程序
                //如果有做过处理，不执行商户的业务程序
            } else {
                echo "trade_status=".$_GET['trade_status'];
            }
            echo "验证成功<br />";
        } else {
            echo "验证失败";
        }
    }


    public function notify_url(){
        Loader::import("AlipayNotify",EXTEND_PATH);
        $alipayNotify = new \AlipayNotify($this->alipay_config);
        $verify_result = $alipayNotify->verifyNotify();

        if($verify_result) {//验证成功
            $out_trade_no = $_GET['out_trade_no'];
            $trade_no = $_GET['trade_no'];
            $trade_status = $_GET['trade_status'];
            $type = $_GET['type'];
            if ($_GET['trade_status'] == 'TRADE_SUCCESS') {


            }

            echo "success";		//请不要修改或删除

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        }
        else {
            //验证失败
            echo "fail";
        }
    }

}